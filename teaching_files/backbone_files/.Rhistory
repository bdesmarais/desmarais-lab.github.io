#### Install and Load ####
#install.packages("backbone")  #Install the package
library(backbone) #Load the package
#### Backbone Suggest ####
N <- matrix(runif(100), 10, 10)  #A random matrix
backbone.suggest(N)  #Suggested backbone function
#### Backbone from Weighted Network (toy example) ####
mat <- matrix(c(0,10,10,10,10,75,0,0,0,0,  #Load toy weighted network,
10,0,1,1,1,0,0,0,0,0,      #with embedded hub/spoke structure
10,1,0,1,1,0,0,0,0,0,
10,1,1,0,1,0,0,0,0,0,
10,1,1,1,0,0,0,0,0,0,
75,0,0,0,0,0,100,100,100,100,
0,0,0,0,0,100,0,10,10,10,
0,0,0,0,0,100,10,0,10,10,
0,0,0,0,0,100,10,10,0,10,
0,0,0,0,0,100,10,10,10,0),10)
weighted <- graph_from_adjacency_matrix(mat, mode = "undirected", weighted = TRUE, diag = FALSE) #Weighted
#### Setup ####
set.seed(1)
library(igraph) #Used for visualizations
library(latex2exp) #Used for visualizations
library(poweRlaw) #To evaluate degree distributions
load("backbone2_tutorial.Rdata")  #Load example data
#### Install and Load ####
#install.packages("backbone")  #Install the package
library(backbone) #Load the package
#### Backbone Suggest ####
N <- matrix(runif(100), 10, 10)  #A random matrix
backbone.suggest(N)  #Suggested backbone function
#### Backbone from Weighted Network (toy example) ####
mat <- matrix(c(0,10,10,10,10,75,0,0,0,0,  #Load toy weighted network,
10,0,1,1,1,0,0,0,0,0,      #with embedded hub/spoke structure
10,1,0,1,1,0,0,0,0,0,
10,1,1,0,1,0,0,0,0,0,
10,1,1,1,0,0,0,0,0,0,
75,0,0,0,0,0,100,100,100,100,
0,0,0,0,0,100,0,10,10,10,
0,0,0,0,0,100,10,0,10,10,
0,0,0,0,0,100,10,10,0,10,
0,0,0,0,0,100,10,10,10,0),10)
weighted <- graph_from_adjacency_matrix(mat, mode = "undirected", weighted = TRUE, diag = FALSE) #Weighted
unweighted <- global(mat, upper = function(x)mean(x), class = "igraph")  #Unweighted, above average
backbone <- disparity(mat, alpha = 0.05, class = "igraph") #Backbone
pdf("Figures/weighted_toy.pdf", height = 2, width = 6) #Plot in manuscript
pdf("Figures/weighted_toy.pdf", height = 2, width = 6) #Plot in manuscript
layout <- layout_with_fr(backbone)
par(mfrow=c(1,3), mar = c(0, 0, 3, 0))
plot(weighted, edge.width = sqrt(igraph::E(weighted)$weight), vertex.label = NA, layout = layout)
title("Weighted Original", line = 1)
plot(unweighted, vertex.label = NA, layout = layout)
title("Global Threshold", line = 1)
plot(backbone, vertex.label = NA, layout = layout)
title("Disparity Backbone", line = 1)
dev.off()
#### Backbone from Weighted Network (empirical example, airport) ####
airport["JFK","LAX"]  #Passengers between New York and Los Angeles
airport["LAN","GRR"]  #Passengers between Lansing and Grand Rapids
airport["LAN","LAX"]  #Passengers between Lansing and Los Angeles
weighted <- graph_from_adjacency_matrix(airport, mode = "undirected", weighted = TRUE, diag = FALSE) #Weighted
k_w <- round(mean(strength(weighted)),2) #Mean degree
unweighted <- global(airport, upper = function(x)mean(x), class = "igraph")
k_u <- round(mean(degree(unweighted)),2) #Mean degree
backbone <- disparity(airport, alpha = 0.001, class = "igraph", narrative = TRUE) #Backbone
k_b <- round(mean(degree(backbone)),2) #Mean degree
degree <- strength(weighted)[which(strength(weighted)>0)]  #Evaluate degree distributions
pl_w <- displ$new(degree)
est <- estimate_xmin(pl_w)
pl_w$setXmin(est)
degree <- degree(unweighted)[which(degree(unweighted)>0)]
pl_u <- displ$new(degree)
est <- estimate_xmin(pl_u)
pl_u$setXmin(est)
degree <- degree(backbone)[which(degree(backbone)>0)]
pl_b <- displ$new(degree)
est <- estimate_xmin(pl_b)
pl_b$setXmin(est)
pdf("Figures/weighted_empirical.pdf", height = 2, width = 6) #Plot
par(mfrow=c(1,3), mar = c(0, 0, 3, 0))
plot(weighted, vertex.label = NA, vertex.shape = "none", vertex.size = 0,
edge.width = log10(E(weighted)$weight^2)/5, edge.color = rgb(0,0,0,.05),
layout = latlong, xlim = c(-124.246, -68.0448), ylim = c(24.5561, 48.7928), rescale = FALSE, edge.curved = TRUE)
title("Weighted Original", line = 1.5)
title(TeX(paste0("$\\langle\\textit{k}\\rangle$ = ", k_w, ", \\textit{P(k) \\sim k$^{-", round(pl_w$pars,2), "}$}")), line = .5)
plot(unweighted, vertex.label = NA, vertex.shape = "none", vertex.size = 0,
edge.width = .1, edge.color = rgb(0,0,0,.05),
layout = latlong, xlim = c(-124.246, -68.0448), ylim = c(24.5561, 48.7928), rescale = FALSE, edge.curved = TRUE)
title("Global Threshold", line = 1.5)
title(TeX(paste0("$\\langle\\textit{k}\\rangle$ = ", k_u, ", \\textit{P(k) \\sim k$^{-", round(pl_u$pars,2), "}$}")), line = .5)
plot(backbone, vertex.label = NA, vertex.shape = "none", vertex.size = 0,
edge.width = .5, edge.color = rgb(0,0,0,.05),
layout = latlong, xlim = c(-124.246, -68.0448), ylim = c(24.5561, 48.7928), rescale = FALSE, edge.curved = TRUE)
title("Disparity Backbone", line = 1.5)
title(TeX(paste0("$\\langle\\textit{k}\\rangle$ = ", k_b, ", \\textit{P(k) \\sim k$^{-", round(pl_b$pars,2), "}$}")), line = .5)
dev.off()
#### Backbone from Bipartite Projection (toy example) ####
B <- rbind(cbind(matrix(rbinom(250,1,.8),10),  #Generate toy bipartite network,
matrix(rbinom(250,1,.2),10),  #with embedded communities
matrix(rbinom(250,1,.2),10)),
cbind(matrix(rbinom(250,1,.2),10),
matrix(rbinom(250,1,.8),10),
matrix(rbinom(250,1,.2),10)),
cbind(matrix(rbinom(250,1,.2),10),
matrix(rbinom(250,1,.2),10),
matrix(rbinom(250,1,.8),10)))
sum(B[1,])  #Agent 1's degree
sum(B[,1])  #Artifact 1's degree
P <- B %*% t(B) #Construct bipartite projection
P[1,2]  #Edge weight for agents in the same group
P[1,20]  #Edge weight for agents in different groups
min(P)  #Smallest edge weight
weighted <- graph_from_adjacency_matrix(P, mode = "undirected", weighted = TRUE, diag = FALSE) #Weighted projection
disparity <- disparity(P, alpha = 0.05, class = "igraph") #Disparity backbone
backbone <- sdsm(B, alpha = 0.05, class = "igraph") #SDSM backbone
pdf("Figures/bipartite_toy.pdf", height = 2, width = 6) #Plot in manuscript
par(mfrow=c(1,3), mar = c(0, 0, 3, 0))
plot(weighted, vertex.label = NA, edge.width = ((E(weighted)$weight)^2)/100)
title("Weighted Original", line = 1)
plot(disparity, vertex.label = NA)
title("Disparity Backbone", line = 1)
plot(backbone, vertex.label = NA)
title("SDSM Backbone", line = 1)
dev.off()
#### Backbone from Bipartite Projection (empirical example, senate) ####
senate[1:2,1:2]  #First two rows and columns
sum(senate["Sen. Stabenow, Debbie [D-MI]",])  #Sponsorships by Sen. Stabenow
sum(senate[,"S.1006"])  #Sponsors of Equality Act
P <- senate %*% t(senate) #Construct bipartite projection
P["Sen. Stabenow, Debbie [D-MI]", "Sen. Peters, Gary C. [D-MI]"]
P["Sen. Stabenow, Debbie [D-MI]", "Sen. Cruz, Ted [R-TX]"]
weighted <- graph_from_adjacency_matrix(P, mode = "undirected", weighted = TRUE, diag = FALSE) #Weighted projection
k_w <- round(mean(strength(weighted)),2) #Mean degree
m_w <- round(modularity(weighted, party, weights = E(weighted)$weight),2) #Modularity
disparity <- disparity(P, alpha = 0.1, class = "igraph") #Disparity Backbone
k_d <- round(mean(degree(disparity)),2) #Mean degree
m_d <- round(modularity(disparity, party),2) #Modularity
backbone <- sdsm(senate, alpha = 0.05, class = "igraph", narrative = TRUE) #SDSM Backbone
k_b <- round(mean(degree(backbone)),2) #Mean degree
m_b <- round(modularity(backbone, party),2) #Modularity
pdf("Figures/bipartite_empirical.pdf", height = 2, width = 6) #Plot in manuscript
color <- party
color[which(color==1)] <- rgb(1,0,0,.5)
color[which(color==2)] <- rgb(0,0,1,.5)
color[which(color==3)] <- rgb(0,1,0,.5)
par(mfrow=c(1,3), mar = c(0, 0, 3, 0))
plot(weighted, vertex.label = NA, vertex.color = color, vertex.frame.color = NA, vertex.size = 10, edge.color = rgb(0,0,0,.25), edge.width = (E(weighted)$weight/100)^2)
title("Weighted Original", line = 1.5)
title(TeX(paste0("$\\langle\\textit{k}\\rangle$ = ", k_w, ", \\textit{Q} = ", m_w)), line = .5)
plot(disparity, vertex.label = NA, vertex.color = color, vertex.frame.color = NA, vertex.size = 10, edge.color = rgb(0,0,0,.25))
title("Disparity Backbone", line = 1.5)
title(TeX(paste0("$\\langle\\textit{k}\\rangle$ = ", k_d, ", \\textit{Q} = ", m_d)), line = .5)
plot(backbone, vertex.label = NA, vertex.color = color, vertex.frame.color = NA, vertex.size = 10, edge.color = rgb(0,0,0,.25))
title("SDSM Backbone", line = 1.5)
title(TeX(paste0("$\\langle\\textit{k}\\rangle$ = ", k_b, ", \\textit{Q} = ", m_b)), line = .5)
dev.off()
#### FDSM trials example ####
backbone <- fdsm(senate, alpha = 0.05, trials = 1000)
backbone <- fdsm(senate, alpha = 0.05)
#### FDSM trials example ####
backbone <- fdsm(senate, alpha = NULL, trials = 1000)
backbone$G
backbone$Pupper[1:5,1"5"]
backbone$Pupper[1:5,1:5]
backbone$Plower[1:5,1:5]
#### Obtaining p-values, using backbone.extract() ####
bb.object <- disparity(airport, alpha = NULL)
backbone$Plower[1:5,1:5]
bb_net <- backbone.extract(backbone, alpha = 0.001)
bb_net
bb_net001 <- backbone.extract(backbone, alpha = 0.001)
bb_net01 <- backbone.extract(backbone, alpha = 0.01)
#### Backbone from Bipartite Projection (empirical example, senate) ####
senate[1:2,1:2]  #First two rows and columns
sum(senate["Sen. Stabenow, Debbie [D-MI]",])  #Sponsorships by Sen. Stabenow
sum(senate[,"S.1006"])  #Sponsors of Equality Act
P <- senate %*% t(senate) #Construct bipartite projection
P["Sen. Stabenow, Debbie [D-MI]", "Sen. Peters, Gary C. [D-MI]"]
P["Sen. Stabenow, Debbie [D-MI]", "Sen. Cruz, Ted [R-TX]"]
weighted <- graph_from_adjacency_matrix(P, mode = "undirected", weighted = TRUE, diag = FALSE) #Weighted projection
k_w <- round(mean(strength(weighted)),2) #Mean degree
m_w <- round(modularity(weighted, party, weights = E(weighted)$weight),2) #Modularity
backbone_fdsm <- fdsm(senate, alpha = 0.05, class = "igraph", narrative = TRUE,trials=10000) #Disparity Backbone
k_d <- round(mean(degree(disparity)),2) #Mean degree
m_d <- round(modularity(disparity, party),2) #Modularity
backbone_sdsm <- sdsm(senate, alpha = 0.05, class = "igraph", narrative = TRUE) #SDSM Backbone
k_b <- round(mean(degree(backbone_sdsm)),2) #Mean degree
m_b <- round(modularity(backbone_sdsm, party),2) #Modularity
pdf("Figures/bipartite_empirical.pdf", height = 2, width = 6) #Plot in manuscript
color <- party
color[which(color==1)] <- rgb(1,0,0,.5)
color[which(color==2)] <- rgb(0,0,1,.5)
color[which(color==3)] <- rgb(0,1,0,.5)
par(mfrow=c(1,3), mar = c(0, 0, 3, 0))
plot(weighted, vertex.label = NA, vertex.color = color, vertex.frame.color = NA, vertex.size = 10, edge.color = rgb(0,0,0,.25), edge.width = (E(weighted)$weight/100)^2)
title("Weighted Original", line = 1.5)
title(TeX(paste0("$\\langle\\textit{k}\\rangle$ = ", k_w, ", \\textit{Q} = ", m_w)), line = .5)
plot(backbone_fdsm, vertex.label = NA, vertex.color = color, vertex.frame.color = NA, vertex.size = 10, edge.color = rgb(0,0,0,.25))
title("FDSM Backbone", line = 1.5)
title(TeX(paste0("$\\langle\\textit{k}\\rangle$ = ", k_d, ", \\textit{Q} = ", m_d)), line = .5)
plot(backbone_sdsm, vertex.label = NA, vertex.color = color, vertex.frame.color = NA, vertex.size = 10, edge.color = rgb(0,0,0,.25))
title("SDSM Backbone", line = 1.5)
title(TeX(paste0("$\\langle\\textit{k}\\rangle$ = ", k_b, ", \\textit{Q} = ", m_b)), line = .5)
dev.off()
write.csv(drugs_data,"drugs.csv")
library(ina)
data(ScottishSchool)
girls_el <- as.matrix(Girls,"edgelist")
girls_el[,1] <- girls_el[,1] - 1
girls_el[,2] <- girls_el[,2] - 1
colnames(girls_el) <- c("sen","rec")
write.csv(girls_el,"girls_el.csv",row.names=F)
girls_am <- as.matrix(Girls,"adjacency")
write.csv(girls_am,"girls_am.csv")
smoke <- 1*(get.vertex.attribute(Girls,"smoke") > 1)
library(ina)
data(ScottishSchool)
girls_el <- as.matrix(Girls,"edgelist")
girls_el[,1] <- girls_el[,1] - 1
girls_el[,2] <- girls_el[,2] - 1
colnames(girls_el) <- c("sen","rec")
write.csv(girls_el,"girls_el.csv",row.names=F)
library(network)
girls_am <- as.matrix(Girls,"adjacency")
write.csv(girls_am,"girls_am.csv")
smoke <- 1*(get.vertex.attribute(Girls,"smoke") > 1)
drugs <- get.vertex.attribute(Girls,"drugs")/2
node <- colnames(girls_am)
node_data <- data.frame(node,smoke,drugs)
write.csv(node_data,"nodes.csv",row.names=F)
drugs_data <- data.frame(node,drugs)
write.csv(drugs_data,"drugs.csv")
library(ina)
data(ScottishSchool)
girls_el <- as.matrix(Girls,"edgelist")
girls_el[,1] <- girls_el[,1] - 1
girls_el[,2] <- girls_el[,2] - 1
colnames(girls_el) <- c("sen","rec")
write.csv(girls_el,"girls_el.csv",row.names=F)
library(network)
girls_am <- as.matrix(Girls,"adjacency")
write.csv(girls_am,"girls_am.csv")
smoke <- 1*(get.vertex.attribute(Girls,"smoke") > 1)
drugs <- get.vertex.attribute(Girls,"drugs")
node <- colnames(girls_am)
node_data <- data.frame(node,smoke,drugs)
write.csv(node_data,"nodes.csv",row.names=F)
drugs_data <- data.frame(node,drugs)
write.csv(drugs_data,"drugs.csv")
