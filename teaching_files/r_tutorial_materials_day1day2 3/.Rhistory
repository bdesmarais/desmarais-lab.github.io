# Store in vertex level data frame
attributes$bc <- bc
# Plot betweenness centrality against tenure
## Make a simple scatter plot
plot(attributes$Tenure,attributes$bc)
## Add a trend (i.e., regression) line
abline(lm(attributes$bc ~ attributes$Tenure))
# Plot network with node size proportional to betweenness centrality
## First normalize
nbc <- bc/max(bc)
## Set random number seed so the plot is replicable
set.seed(5)
## Now plot
plot(adviceNet,displaylabels=T,label=get.vertex.attribute(adviceNet,"Level"),vertex.cex=3*nbc,label.cex=1,edge.col=rgb(150,150,150,100,maxColorValue=255),label.pos=5,vertex.col=vert.cols)
# Closeness Centrality Considers global reach across the network
# Inverse average geodesic distance between i and all other nodes
cc <- closeness(adviceNet)
# Store in vertex level data frame
attributes$cc <- cc
# Plot betweenness centrality against tenure
## Make a simple scatter plot
plot(attributes$Tenure,attributes$cc)
## Add a trend (i.e., regression) line
abline(lm(attributes$cc ~ attributes$Tenure))
# Plot network with node size proportional to closeness centrality
## First normalize
ncc <- cc/max(cc)
## Set random number seed so the plot is replicable
set.seed(5)
## Now plot
plot(adviceNet,displaylabels=T,label=get.vertex.attribute(adviceNet,"Level"),vertex.cex=3*ncc,label.cex=1,edge.col=rgb(150,150,150,100,maxColorValue=255),label.pos=5,vertex.col=vert.cols)
# view relationships among all of the centrality measures
centrality_measures <- data.frame(dc,ec,bc,cc)
plot(centrality_measures)
cor(centrality_measures)
cor.test(centrality_measures)
plot(data.frame(evcent(AllyNet),degree(AllyNet),betweenness(AllyNet),closeness(AllyNet)))
evcent(AllyNet)
degree(AllyNet)
# Read in vertex dataset
allyV <- read.csv("allyVLD.csv", # file to read
stringsAsFactors=F) # indicates to not convert to factor vars
# Read in edgelist
allyEL <- read.csv("allyEL.csv", stringsAsFactors=F)
# Read in contiguity
contig <- read.csv("contiguity.csv",stringsAsFactors=F,row.names=1)
require(network)
# (1) Initialize network
# store number of vertices
n <- nrow(allyV)
AllyNet <- network.initialize(n, # number of nodes
dir=F) # network is not directed
# (2) Set vertex labels
network.vertex.names(AllyNet)  <- allyV$stateabb
# (3) Add in the edges
# Note, edgelist must match vertex labels
AllyNet[as.matrix(allyEL)]  <- 1
# (4) Store country code attribute
set.vertex.attribute(x=AllyNet,   # Network in which to store
"ccode",     # What to name the attribute
allyV$ccode) # Values to put in
# (5) Store year attribute
set.vertex.attribute(AllyNet,"created",allyV$styear)
# (6) Store network attribute
set.network.attribute(AllyNet,"contiguous",as.matrix(contig))
plot(data.frame(evcent(AllyNet),degree(AllyNet),betweenness(AllyNet),closeness(AllyNet)))
closeness(AllyNet)
?closeness
closeness(AllyNet,cmode="suminvundir")
plot(data.frame(evcent(AllyNet),degree(AllyNet),betweenness(AllyNet),closeness(AllyNet,cmode="suminvundir")))
cor(data.frame(evcent(AllyNet),degree(AllyNet),betweenness(AllyNet),closeness(AllyNet,cmode="suminvundir")))
##########################
#  Community Detection   #
##########################
# Creating Network Objects: Defense Pacts (edgelist) (2000)
# gathered from the MIDs project
# published in
# Cranmer, Skyler J., Bruce A. Desmarais, and Justin H. Kirkland. "Toward a network theory of alliance formation."
# International Interactions 38, no. 3 (2012): 295-324.
# Read in vertex dataset
allyV <- read.csv("allyVLD.csv",stringsAsFactors=F)
# Read in edgelist
allyEL <- read.csv("allyEL.csv", stringsAsFactors=F)
# Read in contiguity
contig <- read.csv("contiguity.csv",stringsAsFactors=F,row.names=1)
require(network)
# (1) Initialize network
# store number of vertices
n <- nrow(allyV)
AllyNet <- network.initialize(n,dir=F)
# (2) Set vertex labels
network.vertex.names(AllyNet)  <- allyV$stateabb
# (3) Add in the edges
# Note, edgelist must match vertex labels
AllyNet[as.matrix(allyEL)]  <- 1
# (4) Store country code attribute
set.vertex.attribute(x=AllyNet,             # Network in which to store
"ccode",            # What to name the attribute
allyV$ccode)            # Values to put in
# (5) Store year attribute
set.vertex.attribute(AllyNet,"created",allyV$styear)
# (6) Store network attribute
set.network.attribute(AllyNet,"contiguous",as.matrix(contig))
# Modularity-based community detection popular in physics
# Modularity = Dense within communities, sparse across
library(igraph,quietly=T)
# igraph is a great all-around networks package
# best option for community detection algorithms
library(igraph,quietly=T)
# Convert into a graph
allygr <- graph.adjacency(AllyNet[,],mode="undirected")
# find the best algorithm
comm_fg <- fastgreedy.community(allygr)
comm_le <- leading.eigenvector.community(allygr)
comm_wt <- walktrap.community(allygr)
comm_eb <- edge.betweenness.community(allygr)
modularity(comm_fg)
modularity(comm_le)
modularity(comm_wt)
modularity(comm_eb)
# Check number of communities
max(mem)
mem <- comm_wt$membership
# Check number of communities
max(mem)
table(mem)
# Number of nodes in each community
cbind(table(mem))
colors()
# Get memberships and plot
detach("package:igraph")
set.seed(567)
ccols <- sample(colors(), #
max(mem))
## Now plot
# Simple plot
plot(AllyNet,displaylabels=T,vertex.col=ccols[mem],label.cex=.5,edge.col=rgb(150,150,150,100,maxColorValue=255),displayisolates=F)
# Get memberships and plot
detach("package:igraph")
# igraph is a great all-around networks package
# best option for community detection algorithms
library(igraph,quietly=T)
# Convert into a graph
allygr <- graph.adjacency(AllyNet[,],mode="undirected")
# find the best algorithm
comm_fg <- fastgreedy.community(allygr)
comm_le <- leading.eigenvector.community(allygr)
comm_wt <- walktrap.community(allygr)
comm_eb <- edge.betweenness.community(allygr)
modularity(comm_fg)
modularity(comm_le)
modularity(comm_wt)
modularity(comm_eb)
mem <- comm_wt$membership
# Check number of communities
max(mem)
# Number of nodes in each community
cbind(table(mem))
# Get memberships and plot
detach("package:igraph")
set.seed(567)
ccols <- sample(colors(), #
max(mem))
## Now plot
# Simple plot
plot(AllyNet,displaylabels=T,vertex.col=ccols[mem],label.cex=.5,edge.col=rgb(150,150,150,100,maxColorValue=255),displayisolates=F)
table(allyV$styear)
mem
length(table(mem))
max(mem)
c_size <- table(mem)[mem]
# double check that that worked
cbind(mem,c_size)
table(mem)
cor.test(c_size,allyV$styear)
modularity(comm_fg)
library(igraph)
modularity(comm_fg)
modularity(comm_le)
modularity(comm_wt)
modularity(comm_eb)
table(comm_eb$membership)
# check if that result is robust to using a different algorithm
mem_eb <- comm_eb$membership
c_size_eb <- table(mem_eb)[mem_eb]
cor.test(c_size_eb,allyV$styear)
?walktrap.community
?louvain.community
cl_louv <- cluster.louvain(allygr)
cl_louv <- cluster_louvain(allygr)
modularity(cl_louv)
# check if that result is robust to using a different algorithm
mem_eb <- comm_eb$membership
# Read in adjacency matrices
## read.csv creates a data frame object from a CSV file
## Need to indicate that there's no header row in the CSV
advice <- read.csv("Advice.csv", header=F)
reportsto <- read.csv("ReportsTo.csv", header = F)
# Read in vertex attribute data
attributes <- read.csv("KrackhardtVLD.csv")
# Read in the library required for ERGM analysis
library(ergm)
# Use the advice network dataset to create network object
adviceNet <- network(advice)
advice
?network
dim(advice)
adviceNet <- network(advice[,])
# Use the advice network dataset to create network object
adviceNet <- network(as.matrix(advice))
# Add the vertex attributes into the network
set.vertex.attribute(adviceNet,names(attributes),attributes)
# Add the organizational chart as an edge variable
set.network.attribute(adviceNet,"reportsto",as.matrix(reportsto))
## Just basic covariate model
spec0 <- ergm(adviceNet~edges+edgecov("reportsto")+nodeicov("Tenure")+nodeocov("Tenure")+absdiff("Tenure")+nodeicov("Age")+nodeocov("Age")+absdiff("Age"))
# See if the estimates are reliable
# How does it fit?
gf0 <- gof(spec0)
# Make a panel of four plots
par(mfrow=c(2,2))
# plot goodness of fit results
plot(gf0)
# Check out results
summary(spec0)
# Adding reciprocity
# Set the seed for replication
set.seed(5)
spec1 <-ergm(adviceNet~edges+mutual+edgecov("reportsto")+nodeicov("Tenure")+nodeocov("Tenure")+absdiff("Tenure")+nodeicov("Age")+nodeocov("Age")+absdiff("Age"),control=control.ergm(MCMC.samplesize=2000,MCMLE.maxit=10))
# See if the MCMLE Converged
mcmc.diagnostics(spec1)
# See if its degenerate
gf.degeneracy <- gof(spec1, GOF=~model)
summary(gf.degeneracy)
# How does it fit?
gf1 <- gof(spec1)
# Make a panel of four plots
par(mfrow=c(2,2))
# plot goodness of fit results
plot(gf1)
# Check out results
summary(spec1)
# Account for varied activity
# Set the seed for replication
set.seed(5)
spec2 <- ergm(adviceNet~edges+mutual+ostar(2:3)+edgecov("reportsto")+nodeicov("Tenure")+nodeocov("Tenure")+absdiff("Tenure")+nodeicov("Age")+nodeocov("Age")+absdiff("Age"), control=control.ergm(MCMC.samplesize=2000,MCMLE.maxit=10))
# See if the MCMC converged
mcmc.diagnostics(spec2)
# Need longer burnin to converge
spec2 <- ergm(adviceNet~edges+mutual+ostar(2:3)+edgecov("reportsto")+nodeicov("Tenure")+nodeocov("Tenure")+absdiff("Tenure")+nodeicov("Age")+nodeocov("Age")+absdiff("Age"), control=control.ergm(MCMC.burnin=20000,MCMC.samplesize=4000,MCMLE.maxit=10))
# Account for varied activity
# Set the seed for replication
set.seed(5)
spec2 <- ergm(adviceNet~edges+mutual+ostar(2:3)+edgecov("reportsto")+nodeicov("Tenure")+nodeocov("Tenure")+absdiff("Tenure")+nodeicov("Age")+nodeocov("Age")+absdiff("Age"), control=control.ergm(MCMC.samplesize=2000,MCMLE.maxit=10))
# See if the MCMC converged
mcmc.diagnostics(spec2)
gf.degeneracy <- gof(spec2, GOF=~model)
summary(gf.degeneracy)
# How does it fit?
gf2 <- gof(spec2)
# Make a panel of four plots
par(mfrow=c(2,2))
# plot goodness of fit results
plot(gf2)
# Check out results
summary(spec2)
# Now adding transitivity?
# Set the seed for replication
set.seed(5)
spec3 <- ergm(adviceNet~edges+mutual+ostar(2:3)+transitive+edgecov("reportsto")+nodeicov("Tenure")+nodeocov("Tenure")+absdiff("Tenure")+nodeicov("Age")+nodeocov("Age")+absdiff("Age"), control=control.ergm(MCMC.samplesize=2000,MCMLE.maxit=10))
# Use GWESP Instead
# Set the seed for replication
set.seed(5)
spec4 <- ergm(adviceNet~edges+mutual+ostar(2:3)+gwesp(1)+edgecov("reportsto")+nodeicov("Tenure")+nodeocov("Tenure")+absdiff("Tenure")+nodeicov("Age")+nodeocov("Age")+absdiff("Age"), control=control.ergm(MCMC.burnin=20000,MCMC.samplesize=4000,MCMLE.maxit=10))
# Maybe we can use simple form of GWESP
# Set the seed for replication
set.seed(5)
spec5 <- ergm(adviceNet~edges+mutual+ostar(2:3)+gwesp(0,fixed=T)+edgecov("reportsto")+nodeicov("Tenure")+nodeocov("Tenure")+absdiff("Tenure")+nodeicov("Age")+nodeocov("Age")+absdiff("Age"), control=control.ergm(MCMC.burnin=20000,MCMC.samplesize=4000,MCMLE.maxit=10))
# See if the MCMC converged
mcmc.diagnostics(spec5)
# See if its degenerate
gf.degeneracy <- gof(spec5, GOF=~model)
summary(gf.degeneracy)
# How does it fit?
gf5 <- gof(spec5)
# Make a panel of four plots
par(mfrow=c(2,2))
# plot goodness of fit results
plot(gf5)
# Check out results
summary(spec5)
# Maybe we can use simple form of GWESP
# Set the seed for replication
set.seed(5)
spec5 <- ergm(adviceNet~edges+mutual+ostar(2:3)+gwesp(0.5,fixed=T)+edgecov("reportsto")+nodeicov("Tenure")+nodeocov("Tenure")+absdiff("Tenure")+nodeicov("Age")+nodeocov("Age")+absdiff("Age"), control=control.ergm(MCMC.burnin=20000,MCMC.samplesize=4000,MCMLE.maxit=10))
# See if the MCMC converged
mcmc.diagnostics(spec5)
# See if its degenerate
gf.degeneracy <- gof(spec5, GOF=~model)
summary(gf.degeneracy)
# How does it fit?
gf5 <- gof(spec5)
# Make a panel of four plots
par(mfrow=c(2,2))
# plot goodness of fit results
plot(gf5)
# Check out results
summary(spec5)
# Use GWESP Instead
# Set the seed for replication
set.seed(5)
spec4 <- ergm(adviceNet~edges+mutual+ostar(2:3)+gwesp(0,fixed=T)+edgecov("reportsto")+nodeicov("Tenure")+nodeocov("Tenure")+absdiff("Tenure")+nodeicov("Age")+nodeocov("Age")+absdiff("Age"), control=control.ergm(MCMC.burnin=20000,MCMC.samplesize=4000,MCMLE.maxit=10))
# See if the MCMC converged
mcmc.diagnostics(spec4)
# See if its degenerate
gf.degeneracy <- gof(spec4, GOF=~model)
summary(gf.degeneracy)
# How does it fit?
gf4 <- gof(spec4)
# Make a panel of four plots
par(mfrow=c(2,2))
# plot goodness of fit results
plot(gf4)
# Check out results
summary(spec4)
### See which model fits best
BIC(spec0,spec1,spec2,spec4)
### Consider whether ERGM changes logit-based results
summary(spec0)
summary(spec4)
netlogit
library(sna)
?netlogit
# Read in adjacency matrices
## read.csv creates a data frame object from a CSV file
## Need to indicate that there's no header row in the CSV
advice <- read.csv("Advice.csv", header=F)
reportsto <- read.csv("ReportsTo.csv", header = F)
# Read in vertex attribute data
attributes <- read.csv("KrackhardtVLD.csv")
# Quadratic Assignment Procedure (QAP)
library(sna)
# Assuming the dataframe 'attributes' has columns 'Age' and 'Tenure'
# Create Distance Matrix for Age homophily
ageDist <- as.matrix(dist(attributes$Age))
# Create Sender covariate for Age
# Building matrix column by column
# element ij is i's Age value
ageSend <- matrix(attributes$Age, nrow(attributes), nrow(attributes), byrow = FALSE)
# Create Receiver covariate for Age
# Building matrix row by row
# element ij is j's Age value
ageRec <- matrix(attributes$Age, nrow(attributes), nrow(attributes), byrow = TRUE)
# Create Distance Matrix for Tenure homophily
tenureDist <- as.matrix(dist(attributes$Tenure))
# Create Sender covariate for Tenure
# Building matrix column by column
# element ij is i's Tenure value
tenureSend <- matrix(attributes$Tenure, nrow(attributes), nrow(attributes), byrow = FALSE)
# Create Receiver covariate for Tenure
# Building matrix row by row
# element ij is j's Tenure value
tenureRec <- matrix(attributes$Tenure, nrow(attributes), nrow(attributes), byrow = TRUE)
# for QAP, need to make a list of covariates
covlist <- list(as.matrix(reportsto),
ageDist,
ageSend,
ageRec,
tenureDist,
tenureSend,
tenureRec)
qap_res <- netlogit(as.matrix(advice),covlist)
set.seed(5)
qap_res <- netlogit(as.matrix(advice),covlist,reps=200) # reps should be higher
qap_res
# Latent Space Modeling using the latentnet package
library(latentnet)
# latent sapce model with 2d euclidean space
spec2 <- ergmm(adviceNet~euclidean(d=2)+edgecov("reportsto")+nodeicov("Tenure")+nodeocov("Tenure")+absdiff("Tenure")+nodeicov("Age")+nodeocov("Age")+absdiff("Age"), control=control.ergm(MCMC.samplesize=2000,MCMLE.maxit=10))
# latent sapce model with 2d euclidean space
spec2 <- ergmm(adviceNet~euclidean(d=2)+edgecov("reportsto")
+nodeicov("Tenure")+nodeocov("Tenure")+absdiff("Tenure")
+nodeicov("Age")+nodeocov("Age")+absdiff("Age"))
set.seed(5)
spec2 <- ergmm(adviceNet~euclidean(d=2)+edgecov("reportsto")
+nodeicov("Tenure")+nodeocov("Tenure")+absdiff("Tenure")
+nodeicov("Age")+nodeocov("Age")+absdiff("Age"))
summary(spec2)
# latent sapce model with 2d euclidean space
set.seed(5)
spec6 <- ergmm(adviceNet~bilinear(d=2)+edgecov("reportsto")
+nodeicov("Tenure")+nodeocov("Tenure")+absdiff("Tenure")
+nodeicov("Age")+nodeocov("Age")+absdiff("Age"))
summary(spec6)
gf5 <- gof(spec5)
# Make a panel of four plots
par(mfrow=c(2,2))
# plot goodness of fit results
plot(gf5)
# latent sapce model with 2d euclidean space
set.seed(5)
spec6 <- ergmm(adviceNet~bilinear(d=2)+edgecov("reportsto")
+nodeicov("Tenure")+nodeocov("Tenure")+absdiff("Tenure")
+nodeicov("Age")+nodeocov("Age")+absdiff("Age"))
gf6 <- gof(spec6)
# Make a panel of four plots
par(mfrow=c(2,2))
# plot goodness of fit results
plot(gf6)
summary(spec6)
plot(gf6)
### See which model fits best
BIC(spec0,spec1,spec2,spec4,spec5,spec6)
# install all of the R packages we will need for today
# install.packages(c("igraph","statnet","GGally"))
# data for the first example comes from http://networkdata.ics.uci.edu/netdata/html/krackHighTech.html.
# It is a famous network dataset of 21 managers at a high tech firm that includes networks of advice, where edge i->j indicates
# that i reported getting advice from j, and reporting structure where i->j indicates that
# i reports to j. There is also attribute data that includes Age, Tenure at the company, level in the
# org chart, and a department indicator. This was published in
# Krackhardt, David. Assessing the Political Landscape: Structure, Cognition, and Power in Organizations.
# Administrative Science Quarterly Vol. 35, No. 2 (Jun., 1990), pp. 342-369
# Read in adjacency matrices
## read.csv creates a data frame object from a CSV file
advice <- read.csv("Advice.csv", # file name
header=F) # no header row
reportsto <- read.csv("ReportsTo.csv", header = F)
# Read in vertex attribute data
attributes <- read.csv("KrackhardtVLD.csv")
# Read in the library for network analysis
library(network)
# advice is a data frame, but needs to be a matrix to use in network()
adviceNet <- network(as.matrix(advice))
# Add the vertex attributes into the network
set.vertex.attribute(adviceNet, # name of the network object
names(attributes),# names of the variables
attributes) # values of the variables
# Add the organizational chart as a network variable
set.network.attribute(adviceNet, # name of the network object
"reportsto", # what to call the network object
reportsto) # values for the network object
# Simple plot
## Set random number seed so the plot is replicable
set.seed(5)
## Plot the network
plot(adviceNet, # name of network object
displaylabels=T, # print labels on nodes
label=get.vertex.attribute(adviceNet,"Level"), # use attribute called level
vertex.cex=2, # make nodes twice as large as the default
edge.col=rgb(150,150,150,100,maxColorValue=255), # use even mix of R/G/B
label.pos=5, # put labels in the center of nodes
vertex.col="lightblue") # color them blue
# check out all the options
?plot.network
# Creating Network Objects: Defense Pacts (edgelist) (2000)
# gathered from the MIDs project
# published in
# Cranmer, Skyler J., Bruce A. Desmarais, and Justin H. Kirkland. "Toward a network theory of alliance formation."
# International Interactions 38, no. 3 (2012): 295-324.
# Read in vertex dataset
allyV <- read.csv("allyVLD.csv", # file to read
stringsAsFactors=F) # indicates to not convert to factor vars
# Read in edgelist
allyEL <- read.csv("allyEL.csv", stringsAsFactors=F)
# Read in contiguity
contig <- read.csv("contiguity.csv",stringsAsFactors=F,row.names=1)
require(network)
# (1) Initialize network
# store number of vertices
n <- nrow(allyV)
AllyNet <- network.initialize(n, # number of nodes
dir=F) # network is not directed
# (2) Set vertex labels
network.vertex.names(AllyNet)  <- allyV$stateabb
# (3) Add in the edges
# Note, edgelist must match vertex labels
AllyNet[as.matrix(allyEL)]  <- 1
# (4) Store country code attribute
set.vertex.attribute(x=AllyNet,   # Network in which to store
"ccode",     # What to name the attribute
allyV$ccode) # Values to put in
# (5) Store year attribute
set.vertex.attribute(AllyNet,"created",allyV$styear)
# (6) Store network attribute
set.network.attribute(AllyNet,"contiguous",as.matrix(contig))
# Simple plot
set.seed(5)
plot(AllyNet,displaylabels=T,label.cex=.5,edge.col=rgb(150,150,150,100,maxColorValue=255))
# may want to take out the isolates
set.seed(5)
plot(AllyNet,displayisolates=F,displaylabels=T,label.cex=.5,edge.col=rgb(150,150,150,100,maxColorValue=255))
# save this plot
pdf("./saved_objects/alliance_net_plot.pdf") # open pdf file to which to write
set.seed(5)
plot(AllyNet,displayisolates=F,displaylabels=T,label.cex=.5,edge.col=rgb(150,150,150,100,maxColorValue=255))
dev.off() # stop writing to that file
# visualization using ggplot
# ggplot is a high-powered language-within-a-language for visualization in R
library(GGally)
# need to make character attribute to generate legend
# make a character version of level
cLevel <- as.character(get.vertex.attribute(adviceNet,'Level'))
set.vertex.attribute(adviceNet, # network
"cLevel", # name of new attribute
cLevel) # value
set.seed(5)
ggnet2(adviceNet, color = "cLevel", legend.size = 12,arrow.size=14,color.legend="Level",
color.palette = "Dark2")  +  # use ggplot style
theme(legend.position = "bottom")
# Independent exercises if we have time.
# Plot the nodes in the advice network with vertices sized based on tenure.
# Plot the alliance network using the Kamada-Kawai layout algorithm
